"""
testing_tasks.py
===============================
T·ªïng h·ª£p t·∫•t c·∫£ Tasks cho Testing Agent - Phase 5 Testing
Bao g·ªìm: Test Planning, Test Cases, Security/Performance, QA Checklist, Audit, Test Execution, Test Management

Phase: Phase 5 ‚Äì Testing

Inputs (shared_memory):
- functional_requirements (F.R.D)
- use_case_diagrams
- project_plan
- security_architecture
- non_functional_requirements (NFR)
- source_code_documentation
- code_review_checklist
- cobit_checklist
- qa_checklist

Outputs:
- Test_Plan.docx
- Regression_Testing_Plan.md
- User_Acceptance_Test_Plan.docx
- Test_Case_Specification.xlsx
- Testing_Bug_Report_Template.xlsx
- Testing_Bug_List.xlsx
- Penetration_Testing_Report.md
- Performance_Testing_Report.md
- Documentation_Quality_Assurance_Checklist.md
- System_Quality_Assurance_Checklist.md
- COBIT_Checklist_and_Review.md
- COBIT_Objectives_And_Audit_Activity_Report.md
- Test_Summary_Report.docx
- Interoperability_Test_Logs.md
- Connectivity_Testing_Report.md
- Risk_Management_Register.xlsx
- Issues_Management_Log.xlsx
- Project_Status_Report.md
- Meeting_Summary_Template.docx
- Project_Milestone_Status_Form_Template.docx
"""

from crewai import Task
from utils.file_writer import write_output
from memory.shared_memory import shared_memory


# ========================================
# TEST PLANNING TASKS
# ========================================

def create_test_plan_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• l·∫≠p k·∫ø ho·∫°ch ki·ªÉm th·ª≠"""
    print("üß™ Kh·ªüi t·∫°o c√°c nhi·ªám v·ª• l·∫≠p k·∫ø ho·∫°ch ki·ªÉm th·ª≠...")
    print("üì• L·∫•y d·ªØ li·ªáu t·ª´ shared_memory...")

    frd = shared_memory.get("phase_3_design", "functional_requirements") or "Ch∆∞a c√≥ Functional Requirements Document."
    use_cases = shared_memory.get("phase_3_design", "use_case_diagrams") or "Ch∆∞a c√≥ Use Case Diagram."
    project_plan = shared_memory.get("phase_1_planning", "project_plan") or "Ch∆∞a c√≥ Project Plan."

    print("‚úÖ ƒê√£ t·∫£i xong d·ªØ li·ªáu ƒë·∫ßu v√†o.")

    # Task 1: Master Test Plan
    master_test_plan = Task(
        description=f"""
            T·∫°o t√†i li·ªáu ch√≠nh Test_Plan.docx ƒë·ªãnh h∆∞·ªõng to√†n b·ªô ho·∫°t ƒë·ªông ki·ªÉm th·ª≠.

            ### Inputs:
            - Functional Requirements: {frd[:300]}...
            - Use Case Diagrams: {use_cases[:300]}...
            - Project Plan: {project_plan[:300]}...

            ### N·ªôi dung b·∫Øt bu·ªôc:
            1. M·ª•c ti√™u & ph·∫°m vi ki·ªÉm th·ª≠
            2. M√¥ h√¨nh ki·ªÉm th·ª≠ (Agile, Waterfall...)
            3. Lo·∫°i ki·ªÉm th·ª≠ √°p d·ª•ng: Unit, Integration, System, Regression, UAT
            4. Chi·∫øn l∆∞·ª£c ki·ªÉm th·ª≠: manual vs automation
            5. M√¥i tr∆∞·ªùng, d·ªØ li·ªáu ki·ªÉm th·ª≠
            6. Test schedule mapping v·ªõi project timeline
            7. Vai tr√≤ v√† tr√°ch nhi·ªám (Dev, QA, PO)
            8. C√¥ng c·ª• ki·ªÉm th·ª≠: qu·∫£n l√Ω testcase, defect, CI/CD
            9. Ti√™u ch√≠ ƒë·∫ßu v√†o/ƒë·∫ßu ra & traceability matrix
            10. Sign-off policy v√† versioning

            ### Output:
            Test_Plan.docx
        """,
        expected_output="Test_Plan.docx ‚Äì T√†i li·ªáu k·∫ø ho·∫°ch ki·ªÉm th·ª≠ t·ªïng th·ªÉ to√†n d·ª± √°n.",
        agent=testing_agent,
        callback=lambda output: (
            write_output("output/5_testing/Test_Plan.docx", output),
            shared_memory.set("phase_5_testing", "test_plan", output)
        )
    )

    # Task 2: Regression Testing Plan
    regression_test_plan = Task(
        description=f"""
            T·∫°o t√†i li·ªáu Regression_Testing_Plan.md m√¥ t·∫£ chi·∫øn l∆∞·ª£c ki·ªÉm th·ª≠ h·ªìi quy.

            ### Inputs:
            - Functional Requirements: {frd[:300]}...
            - Project Plan: {project_plan[:300]}...

            ### N·ªôi dung c·∫ßn c√≥:
            1. Trigger points (khi n√†o ch·∫°y regression)
            2. Danh s√°ch test case quan tr·ªçng
            3. K·ªãch b·∫£n ki·ªÉm th·ª≠ h·ªìi quy
            4. Chi·∫øn l∆∞·ª£c t·ª± ƒë·ªông h√≥a regression test
            5. L·ªãch ch·∫°y regression (per sprint / pre-release)
            6. Theo d√µi coverage v√† l·ªói t√°i di·ªÖn
            7. C·∫•u h√¨nh m√¥i tr∆∞·ªùng ƒë·∫∑c bi·ªát (n·∫øu c√≥)

            ### Output:
            Regression_Testing_Plan.md
        """,
        expected_output="Regression_Testing_Plan.md ‚Äì T√†i li·ªáu chi·∫øn l∆∞·ª£c ki·ªÉm th·ª≠ h·ªìi quy.",
        agent=testing_agent,
        callback=lambda output: (
            write_output("output/5_testing/Regression_Testing_Plan.md", output),
            shared_memory.set("phase_5_testing", "regression_plan", output)
        )
    )

    # Task 3: User Acceptance Testing (UAT) Plan
    uat_test_plan = Task(
        description=f"""
            L·∫≠p k·∫ø ho·∫°ch ki·ªÉm th·ª≠ UAT ƒë·ªÉ ng∆∞·ªùi d√πng x√°c nh·∫≠n h·ªá th·ªëng ƒë√∫ng nh∆∞ y√™u c·∫ßu nghi·ªáp v·ª•.

            ### Inputs:
            - Functional Requirements: {frd[:300]}...
            - Use Case Diagrams: {use_cases[:300]}...
            - Project Plan: {project_plan[:300]}...

            ### N·ªôi dung y√™u c·∫ßu:
            1. M·ª•c ti√™u v√† ph·∫°m vi UAT
            2. ƒê·ªëi t∆∞·ª£ng tham gia (Users, PO, QA, BA)
            3. Use case c·∫ßn x√°c th·ª±c v√† k·ªãch b·∫£n test
            4. Timeline UAT & m√¥i tr∆∞·ªùng th·ª≠ nghi·ªám
            5. C√°ch thu th·∫≠p ph·∫£n h·ªìi ng∆∞·ªùi d√πng
            6. Ti√™u ch√≠ pass/fail v√† sign-off
            7. Checklist chu·∫©n b·ªã & tr√°ch nhi·ªám t·ª´ng b√™n

            ### Output:
            User_Acceptance_Test_Plan.docx
        """,
        expected_output="User_Acceptance_Test_Plan.docx ‚Äì T√†i li·ªáu k·∫ø ho·∫°ch ki·ªÉm th·ª≠ UAT t·ª´ ng∆∞·ªùi d√πng.",
        agent=testing_agent,
        callback=lambda output: (
            write_output("output/5_testing/User_Acceptance_Test_Plan.docx", output),
            shared_memory.set("phase_5_testing", "uat_plan", output)
        )
    )

    print("‚úÖ Ho√†n t·∫•t t·∫°o c√°c Test Plan Tasks.")
    return [master_test_plan, regression_test_plan, uat_test_plan]


# ========================================
# TEST CASE TASKS
# ========================================

def create_test_case_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• vi·∫øt test case v√† bug tracking"""
    print("üß™ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Test Case & Bug Tracking Tasks...")
    print("üì• ƒêang truy xu·∫•t d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ shared_memory...")

    test_plan = shared_memory.get("phase_5_testing", "test_plan") or "Test Plan ch∆∞a c√≥."
    frd = shared_memory.get("phase_2_requirement", "frd") or "F.R.D ch∆∞a s·∫µn s√†ng."
    use_cases = shared_memory.get("phase_2_requirement", "use_case_diagrams") or "Use Case Diagram ch∆∞a c√≥."

    print("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng.")

    # Task 1: Test Case Specification
    test_case_task = Task(
        description=f"""
            Vi·∫øt t√†i li·ªáu Test Case Specification chi ti·∫øt d·ª±a tr√™n Test Plan, F.R.D v√† Use Case Diagrams.

            ### Y√™u c·∫ßu n·ªôi dung:
            - Test Case ID
            - Ch·ª©c nƒÉng ki·ªÉm th·ª≠
            - ƒêi·ªÅu ki·ªán ti·ªÅn ƒë·ªÅ
            - B∆∞·ªõc ki·ªÉm th·ª≠
            - K·∫øt qu·∫£ mong ƒë·ª£i
            - K·∫øt qu·∫£ th·ª±c t·∫ø (runtime)
            - M·ª©c ∆∞u ti√™n
            - Lo·∫°i ki·ªÉm th·ª≠ (functional, regression, UAT)
            - Traceability t·ªõi requirement
            - Tr·∫°ng th√°i th·ª±c thi

            ### Inputs:
            - Test Plan: {test_plan[:400]}...
            - F.R.D: {frd[:400]}...
            - Use Case Diagrams: {use_cases[:400]}...

            ### Output:
            - File: Test_Case_Specification.xlsx
        """,
        expected_output="Test_Case_Specification.xlsx ‚Äì Danh s√°ch test case c√≥ traceability r√µ r√†ng.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ Ho√†n th√†nh ƒë·∫∑c t·∫£ test case."),
            write_output("output/5_testing/Test_Case_Specification.xlsx", output),
            shared_memory.set("phase_5_testing", "test_case_specification", output)
        )
    )

    # Task 2: Bug Report Template
    bug_template_task = Task(
        description="""
            T·∫°o template chu·∫©n ƒë·ªÉ tester log bug d·ªÖ d√†ng v√† th·ªëng nh·∫•t.

            ### Y√™u c·∫ßu c√°c tr∆∞·ªùng:
            - Bug ID
            - T√™n module/ch·ª©c nƒÉng
            - C√°c b∆∞·ªõc t√°i hi·ªán l·ªói
            - K·∫øt qu·∫£ mong ƒë·ª£i vs th·ª±c t·∫ø
            - M·ª©c ƒë·ªô nghi√™m tr·ªçng (Severity)
            - ∆Øu ti√™n (Priority)
            - M√¥i tr∆∞·ªùng ki·ªÉm th·ª≠
            - Ng∆∞·ªùi b√°o l·ªói & th·ªùi gian
            - Tr·∫°ng th√°i (Open, Fixed, Closed...)
            - Li√™n k·∫øt Test Case ID

            ### Output:
            - File: Testing_Bug_Report_Template.xlsx
        """,
        expected_output="Testing_Bug_Report_Template.xlsx ‚Äì M·∫´u chu·∫©n b√°o c√°o bug cho tester.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ T·∫°o xong Bug Report Template."),
            write_output("output/5_testing/Testing_Bug_Report_Template.xlsx", output),
            shared_memory.set("phase_5_testing", "bug_report_template", output)
        )
    )

    # Task 3: Bug List
    bug_list_task = Task(
        description="""
            T·ªïng h·ª£p danh s√°ch bug ƒë∆∞·ª£c ghi nh·∫≠n trong qu√° tr√¨nh ki·ªÉm th·ª≠.

            ### Required Columns:
            - Bug ID
            - M√¥ t·∫£ t√≥m t·∫Øt
            - Tr·∫°ng th√°i hi·ªán t·∫°i
            - Developer ƒë∆∞·ª£c giao x·ª≠ l√Ω
            - Severity & Priority
            - Test Case li√™n k·∫øt
            - Sprint ho·∫∑c b·∫£n ph√°t h√†nh
            - Version ƒë√£ fix
            - K·∫øt qu·∫£ x√°c minh l·∫°i

            ### Output:
            - File: Testing_Bug_List.xlsx
        """,
        expected_output="Testing_Bug_List.xlsx ‚Äì Danh s√°ch bug ƒëang ƒë∆∞·ª£c theo d√µi & x√°c minh.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ T·∫°o xong danh s√°ch bug."),
            write_output("output/5_testing/Testing_Bug_List.xlsx", output),
            shared_memory.set("phase_5_testing", "bug_list", output)
        )
    )

    print("üéØ ƒê√£ ƒë·ªãnh nghƒ©a xong 3 nhi·ªám v·ª•: test case, bug template, bug list.")
    return [test_case_task, bug_template_task, bug_list_task]


# ========================================
# SECURITY & PERFORMANCE TESTING TASKS
# ========================================

def create_security_perf_test_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• ki·ªÉm th·ª≠ b·∫£o m·∫≠t v√† hi·ªáu nƒÉng"""
    print("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Security & Performance Testing Tasks...")
    print("üîç Truy xu·∫•t d·ªØ li·ªáu t·ª´ shared_memory...")

    security_doc = shared_memory.get("phase_5_testing", "security_architecture") or "Ch∆∞a c√≥ t√†i li·ªáu Security Architecture."
    nfr_doc = shared_memory.get("phase_3_design", "non_functional_requirements") or "Ch∆∞a c√≥ NFR."

    print("‚úÖ D·ªØ li·ªáu ƒë·∫ßu v√†o ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")

    # Task 1: Penetration Testing Report
    penetration_task = Task(
        description=f"""
            Th·ª±c hi·ªán ki·ªÉm th·ª≠ th√¢m nh·∫≠p h·ªá th·ªëng theo ti√™u chu·∫©n OWASP, d·ª±a tr√™n t√†i li·ªáu ki·∫øn tr√∫c b·∫£o m·∫≠t v√† y√™u c·∫ßu phi ch·ª©c nƒÉng.

            ### N·ªôi dung b·∫Øt bu·ªôc:
            1. Scope v√† m·ª•c ti√™u ki·ªÉm th·ª≠ b·∫£o m·∫≠t
            2. C√°c ki·ªÉu t·∫•n c√¥ng gi·∫£ l·∫≠p: SQLi, XSS, CSRF, IDOR, Auth bypass...
            3. C√¥ng c·ª• s·ª≠ d·ª•ng: Burp Suite, OWASP ZAP, Metasploit, Kali Linux...
            4. M√¥i tr∆∞·ªùng v√† k·ªãch b·∫£n ki·ªÉm th·ª≠ (whitebox/blackbox)
            5. M·ª©c ƒë·ªô r·ªßi ro (CVSS Score) v√† ·∫£nh h∆∞·ªüng
            6. Log, PoC ho·∫∑c ·∫£nh minh h·ªça
            7. ƒê·ªÅ xu·∫•t bi·ªán ph√°p kh·∫Øc ph·ª•c
            8. T·ªïng k·∫øt ƒë·ªô an to√†n t·ªïng th·ªÉ

            ### Input:
            - Security Architecture Document: {security_doc[:800]}...
            - NFR: {nfr_doc[:500]}...

            ### Output:
            - File: Penetration_Testing_Report.md
        """,
        expected_output="Penetration_Testing_Report.md ‚Äì B√°o c√°o ƒë·∫ßy ƒë·ªß v·ªÅ k·∫øt qu·∫£ ki·ªÉm th·ª≠ b·∫£o m·∫≠t h·ªá th·ªëng.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ ƒê√£ t·∫°o Penetration_Testing_Report.md"),
            write_output("output/5_testing/Penetration_Testing_Report.md", str(output)),
            shared_memory.set("phase_5_testing", "penetration_test_report", str(output))
        )
    )

    # Task 2: Performance Testing Report
    performance_task = Task(
        description=f"""
            Th·ª±c hi·ªán ki·ªÉm th·ª≠ hi·ªáu nƒÉng h·ªá th·ªëng d·ª±a tr√™n c√°c m·ª•c ti√™u phi ch·ª©c nƒÉng: t·ªëc ƒë·ªô ph·∫£n h·ªìi, kh·∫£ nƒÉng ch·ªãu t·∫£i v√† t√≠nh ·ªïn ƒë·ªãnh.

            ### N·ªôi dung b·∫Øt bu·ªôc:
            1. Lo·∫°i ki·ªÉm th·ª≠: Load, Stress, Spike, Soak
            2. C·∫•u h√¨nh h·ªá th·ªëng: OS, CPU, RAM, DB, Users
            3. K·ªãch b·∫£n ki·ªÉm th·ª≠ v√† d·ªØ li·ªáu test
            4. C√¥ng c·ª• s·ª≠ d·ª•ng: JMeter, k6, Locust, Artillery...
            5. K·∫øt qu·∫£ ƒëo l∆∞·ªùng:
            - Avg/Max Response Time
            - Throughput (req/sec)
            - CPU/RAM/Network s·ª≠ d·ª•ng
            - T·ª∑ l·ªá l·ªói
            6. Bottleneck analysis & root cause
            7. ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn
            8. ƒê√°nh gi√° kh·∫£ nƒÉng m·ªü r·ªông

            ### Input:
            - NFR: {nfr_doc[:800]}...

            ### Output:
            - File: Performance_Testing_Report.md
        """,
        expected_output="Performance_Testing_Report.md ‚Äì B√°o c√°o hi·ªáu nƒÉng chi ti·∫øt theo NFR.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ ƒê√£ t·∫°o Performance_Testing_Report.md"),
            write_output("output/5_testing/Performance_Testing_Report.md", str(output)),
            shared_memory.set("phase_5_testing", "performance_test_report", str(output))
        )
    )

    print("üìä Ho√†n th√†nh kh·ªüi t·∫°o task ki·ªÉm th·ª≠ b·∫£o m·∫≠t & hi·ªáu nƒÉng.")
    return [penetration_task, performance_task]


# ========================================
# QA CHECKLIST TASKS
# ========================================

def create_qa_checklist_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• QA checklist"""
    print("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o QA Checklist Tasks...")
    print("üîç L·∫•y d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ chia s·∫ª...")

    doc_data = shared_memory.get("phase_5_testing", "source_code_documentation") or "Source Code Documentation ch∆∞a c√≥."
    code_review = shared_memory.get("phase_5_testing", "code_review_checklist") or "Code Review Checklist ch∆∞a c√≥."

    print("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng!")

    # Task 1: Documentation QA Checklist
    doc_checklist_task = Task(
        description=f"""
            T·∫°o checklist QA ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng t√†i li·ªáu m√£ ngu·ªìn ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ƒë·∫ßy ƒë·ªß, d·ªÖ b·∫£o tr√¨, v√† h·ªó tr·ª£ t·ªët vi·ªác onboarding.

            ### N·ªôi dung checklist:
            1. C√≥ ki·∫øn tr√∫c h·ªá th·ªëng, API, module logic
            2. H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t v√† ch·∫°y (local/staging)
            3. C√≥ v√≠ d·ª• m√£ ngu·ªìn minh h·ªça
            4. C·∫≠p nh·∫≠t version g·∫ßn nh·∫•t
            5. Li√™n k·∫øt gi·ªØa t√†i li·ªáu v√† module t∆∞∆°ng ·ª©ng
            6. Tu√¢n th·ªß chu·∫©n format v√† naming
            7. Kh√¥ng c√≥ l·ªói ng·ªØ ph√°p ho·∫∑c ƒë√°nh m√°y
            8. Ghi r√µ ng∆∞·ªùi vi·∫øt / th·ªùi gian c·∫≠p nh·∫≠t
            9. S·ª≠ d·ª•ng t·ªët trong onboarding
            10. ƒê∆∞·ª£c ki·ªÉm so√°t version (Git/docs tool)

            ### Inputs:
            - Source Code Documentation: {doc_data[:800]}...
            - Code Review Checklist: {code_review[:400]}...

            ### Output:
            - Documentation_Quality_Assurance_Checklist.md
        """,
        expected_output="Checklist Markdown: Documentation_Quality_Assurance_Checklist.md",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ Ho√†n t·∫•t checklist t√†i li·ªáu."),
            write_output("output/5_testing/Documentation_Quality_Assurance_Checklist.md", str(output)),
            shared_memory.set("phase_5_testing", "qa_doc_checklist", str(output))
        )
    )

    # Task 2: System QA Checklist
    sys_checklist_task = Task(
        description=f"""
            T·∫°o checklist QA ƒë·ªÉ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng h·ªá th·ªëng t·ªïng th·ªÉ d·ª±a tr√™n source code v√† k·∫øt qu·∫£ review.

            ### N·ªôi dung checklist:
            1. Tu√¢n th·ªß coding standard (naming, structure)
            2. Unit test coverage ‚â• 80%
            3. Kh√¥ng c√≤n bug blocker ho·∫∑c critical defect
            4. CI/CD pipeline ho·∫°t ƒë·ªông ·ªïn ƒë·ªãnh
            5. Kh√¥ng ch·ª©a hardcoded secrets/token
            6. Kh√¥ng c√≤n warning t·ª´ static analysis
            7. Code t·ªëi ∆∞u: lo·∫°i b·ªè dead code, loop inefficiency
            8. C√≥ logging v√† error handling r√µ r√†ng
            9. Ph√¢n t√°ch t·ªët gi·ªØa logic / config / I/O
            10. H·ªá th·ªëng c√≥ kh·∫£ nƒÉng m·ªü r·ªông v√† b·∫£o tr√¨ t·ªët

            ### Inputs:
            - Source Code Documentation: {doc_data[:500]}...
            - Code Review Checklist: {code_review[:500]}...

            ### Output:
            - System_Quality_Assurance_Checklist.md
        """,
        expected_output="Checklist Markdown: System_Quality_Assurance_Checklist.md",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ Ho√†n t·∫•t checklist h·ªá th·ªëng."),
            write_output("output/5_testing/System_Quality_Assurance_Checklist.md", str(output)),
            shared_memory.set("phase_5_testing", "qa_system_checklist", str(output))
        )
    )

    print("üìã QA Checklist Tasks ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")
    return [doc_checklist_task, sys_checklist_task]


# ========================================
# AUDIT TASKS
# ========================================

def create_audit_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• audit theo COBIT"""
    print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o c√°c nhi·ªám v·ª• Audit theo COBIT...")
    print("üîç Truy xu·∫•t d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ shared memory...")

    cobit_checklist = shared_memory.get("phase_5_testing", "cobit_checklist") or "Kh√¥ng t√¨m th·∫•y COBIT Checklist."
    qa_checklist = shared_memory.get("phase_5_testing", "qa_checklist") or "Kh√¥ng t√¨m th·∫•y QA Checklist."

    print("‚úÖ D·ªØ li·ªáu ƒë·∫ßu v√†o ƒë√£ s·∫µn s√†ng.")

    # Task 1: COBIT Checklist Review
    review_task = Task(
        description=f"""
            ƒê√°nh gi√° h·ªá th·ªëng theo COBIT 2019 b·∫±ng c√°ch ƒë·ªëi chi·∫øu c√°c ti√™u ch√≠ ki·ªÉm th·ª≠ t·ª´ QA Checklist.

            ### N·ªôi dung ch√≠nh:
            1. Mapping COBIT domain (BAI, DSS, EDM) v·ªõi QA checklist
            2. Ph√¢n t√≠ch ƒë·ªô ph·ªß, ƒëi·ªÉm m·∫°nh/y·∫øu c·ªßa h·ªá th·ªëng
            3. Li·ªát k√™ c√°c gaps, r·ªßi ro & ƒë·ªÅ xu·∫•t ƒëi·ªÅu ch·ªânh
            4. ƒê√°nh gi√° t·ªïng th·ªÉ m·ª©c ƒë·ªô tu√¢n th·ªß chu·∫©n COBIT

            ### Inputs:
            - COBIT Checklist: {cobit_checklist[:800]}...
            - QA Checklist: {qa_checklist[:800]}...

            ### Output:
            - Markdown: COBIT_Checklist_and_Review.md
        """,
        expected_output="COBIT_Checklist_and_Review.md ‚Äì ƒê√°nh gi√° compliance theo domain COBIT.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ ƒê√£ t·∫°o COBIT_Checklist_and_Review.md"),
            write_output("output/5_testing/COBIT_Checklist_and_Review.md", str(output)),
            shared_memory.set("phase_5_testing", "cobit_review", str(output))
        )
    )

    # Task 2: COBIT Audit Report
    audit_report_task = Task(
        description=f"""
            T·ªïng h·ª£p b√°o c√°o c√°c ho·∫°t ƒë·ªông audit, ƒë·ªëi chi·∫øu v·ªõi m·ª•c ti√™u COBIT v√† ƒë∆∞a ra ƒë·ªÅ xu·∫•t c·∫£i ti·∫øn.

            ### N·ªôi dung b·∫Øt bu·ªôc:
            1. COBIT Objectives ƒë∆∞·ª£c ki·ªÉm tra (vd: BAI03, DSS05)
            2. Ph√¢n t√≠ch b·∫±ng ch·ª©ng ki·ªÉm th·ª≠ & k·ªπ thu·∫≠t gi√°m s√°t
            3. Ph√°t hi·ªán non-conformities v√† m·ª©c ƒë·ªô r·ªßi ro
            4. ƒê·ªÅ xu·∫•t ho·∫°t ƒë·ªông ki·ªÉm so√°t ho·∫∑c c·∫£i ti·∫øn
            5. K·∫ø ho·∫°ch x√°c minh l·∫°i
            6. Nh·∫≠n x√©t t·ªïng k·∫øt c·ªßa auditor

            ### Inputs:
            - COBIT Checklist: {cobit_checklist[:800]}...
            - QA Checklist: {qa_checklist[:800]}...

            ### Output:
            - Markdown: COBIT_Objectives_And_Audit_Activity_Report.md
        """,
        expected_output="COBIT_Objectives_And_Audit_Activity_Report.md ‚Äì B√°o c√°o gi√°m s√°t & ƒë·ªÅ xu·∫•t c·∫£i ti·∫øn theo COBIT.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ ƒê√£ t·∫°o COBIT_Objectives_And_Audit_Activity_Report.md"),
            write_output("output/5_testing/COBIT_Objectives_And_Audit_Activity_Report.md", str(output)),
            shared_memory.set("phase_5_testing", "cobit_audit", str(output))
        )
    )

    print("‚úÖ Ho√†n t·∫•t t·∫°o c√°c Audit Tasks.")
    return [review_task, audit_report_task]


# ========================================
# TEST EXECUTION TASKS
# ========================================

def create_test_execution_tasks(testing_agent):
    """T·∫°o c√°c nhi·ªám v·ª• th·ª±c thi ki·ªÉm th·ª≠"""
    print("üö¶ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Test Execution Tasks...")
    print("üì• Truy xu·∫•t d·ªØ li·ªáu ki·ªÉm th·ª≠ t·ª´ shared memory...")

    test_cases = shared_memory.get("phase_5_testing", "test_case_specification") or "Test Case Specification ch∆∞a c√≥."
    bug_list = shared_memory.get("phase_5_testing", "bug_list") or "Bug List ch∆∞a c√≥."

    print("‚úÖ D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng.")

    # Task 1: Test Summary Report
    summary_task = Task(
        description=f"""
            T·∫°o t√†i li·ªáu t·ªïng h·ª£p k·∫øt qu·∫£ th·ª±c thi ki·ªÉm th·ª≠ to√†n h·ªá th·ªëng, bao g·ªìm t·ª∑ l·ªá th√†nh c√¥ng, l·ªói, coverage v√† ƒë√°nh gi√° s·∫µn s√†ng tri·ªÉn khai.

            ### Inputs:
            - Test Case Specification: {test_cases[:400]}...
            - Bug List: {bug_list[:400]}...

            ### N·ªôi dung c·∫ßn c√≥:
            1. T·ªïng s·ªë test case ƒë√£ th·ª±c thi
            2. T·ª∑ l·ªá pass/fail & bi·ªÉu ƒë·ªì th·ªëng k√™
            3. Danh s√°ch & ph√¢n t√≠ch defect (theo severity)
            4. M·ª©c ƒë·ªô coverage & traceability
            5. Module c√≥ l·ªói n·ªïi b·∫≠t
            6. K·∫øt lu·∫≠n ch·∫•t l∆∞·ª£ng h·ªá th·ªëng
            7. ƒê·ªÅ xu·∫•t c·∫£i ti·∫øn tr∆∞·ªõc khi release
            8. X√°c nh·∫≠n QA lead

            ### Output:
            Test_Summary_Report.docx
        """,
        expected_output="Test_Summary_Report.docx ‚Äì T·ªïng h·ª£p k·∫øt qu·∫£ th·ª±c thi ki·ªÉm th·ª≠ h·ªá th·ªëng.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ B√°o c√°o Test Summary ƒë√£ ho√†n th√†nh."),
            write_output("output/5_testing/Test_Summary_Report.docx", output),
            shared_memory.set("phase_5_testing", "test_summary_report", output)
        )
    )

    # Task 2: Interoperability Logs
    interoperability_task = Task(
        description="""
            Ghi log ki·ªÉm th·ª≠ t√≠nh t∆∞∆°ng th√≠ch (interoperability) gi·ªØa c√°c module, d·ªãch v·ª•, h·ªá th·ªëng ho·∫∑c phi√™n b·∫£n.

            ### N·ªôi dung:
            - M√¥i tr∆∞·ªùng ki·ªÉm th·ª≠ (OS, DB, microservices, API gateway...)
            - Scenarios: cross-version, backward compatibility
            - Ghi nh·∫≠n l·ªói t∆∞∆°ng th√≠ch & x·ª≠ l√Ω
            - K·∫øt lu·∫≠n m·ª©c ƒë·ªô t∆∞∆°ng th√≠ch v√† r·ªßi ro t·ªìn ƒë·ªçng

            ### Output:
            - Interoperability_Test_Logs.md
        """,
        expected_output="Interoperability_Test_Logs.md ‚Äì Log ki·ªÉm th·ª≠ t∆∞∆°ng th√≠ch chi ti·∫øt.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ Log ki·ªÉm th·ª≠ t∆∞∆°ng th√≠ch ƒë√£ ƒë∆∞·ª£c ghi."),
            write_output("output/5_testing/Interoperability_Test_Logs.md", output),
            shared_memory.set("phase_5_testing", "interoperability_logs", output)
        )
    )

    # Task 3: Connectivity Testing Report
    connectivity_task = Task(
        description="""
            T·∫°o b√°o c√°o ki·ªÉm th·ª≠ k·∫øt n·ªëi h·ªá th·ªëng gi·ªØa c√°c th√†nh ph·∫ßn ch√≠nh (frontend, backend, database, APIs).

            ### N·ªôi dung b·∫Øt bu·ªôc:
            - Scope ki·ªÉm th·ª≠ k·∫øt n·ªëi
            - K·∫øt qu·∫£ ki·ªÉm th·ª≠ m·∫°ng (timeout, DNS, SSL handshake, retry logic)
            - B√°o c√°o status c√°c endpoint/API
            - Ph√¢n t√≠ch bottleneck k·∫øt n·ªëi
            - ƒê·ªÅ xu·∫•t c·∫£i thi·ªán reliability ho·∫∑c config

            ### Output:
            - Connectivity_Testing_Report.md
        """,
        expected_output="Connectivity_Testing_Report.md ‚Äì B√°o c√°o ki·ªÉm th·ª≠ k·∫øt n·ªëi chi ti·∫øt v√† c·∫£i ti·∫øn ƒë·ªÅ xu·∫•t.",
        agent=testing_agent,
        callback=lambda output: (
            print("‚úÖ B√°o c√°o ki·ªÉm th·ª≠ k·∫øt n·ªëi ho√†n t·∫•t."),
            write_output("output/5_testing/Connectivity_Testing_Report.md", output),
            shared_memory.set("phase_5_testing", "connectivity_test_report", output)
        )
    )

    print("üéØ Ho√†n t·∫•t ƒë·ªãnh nghƒ©a c√°c nhi·ªám v·ª• th·ª±c thi ki·ªÉm th·ª≠.")
    return [summary_task, interoperability_task, connectivity_task]

def create_test_management_tasks(testing_agent):
    print("üõ†Ô∏è B·∫Øt ƒë·∫ßu t·∫°o c√°c Test Management Tasks...")
    print("üì• Truy xu·∫•t d·ªØ li·ªáu t·ª´ shared_memory...")

    bug_report = shared_memory.get("phase_5_testing", "bug_list") or "Bug list ch∆∞a c√≥."
    test_summary = shared_memory.get("phase_5_testing", "test_summary_report") or "Test summary ch∆∞a c√≥."

    print("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c load.")

    # Task 1: Risk Management Register
    risk_task = Task(
        description=f"""
            T·∫°o file Risk Register d·ª±a tr√™n c√°c l·ªói nghi√™m tr·ªçng trong ki·ªÉm th·ª≠ v√† ph√¢n t√≠ch t·ª´ b√°o c√°o t·ªïng h·ª£p.

            ### Inputs:
            - Bug List: {bug_report[:300]}...
            - Test Summary Report: {test_summary[:300]}...

            ### Output:
            - File: Risk_Management_Register.xlsx

            ### C·ªôt c·∫ßn c√≥:
            - Risk ID, Description, Root Cause
            - Impact, Probability, Severity, Owner
            - Mitigation Action, Status, Review Date
        """,
        expected_output="Risk_Management_Register.xlsx ‚Äì Danh s√°ch r·ªßi ro ƒë∆∞·ª£c ph√°t hi·ªán qua ki·ªÉm th·ª≠.",
        agent=testing_agent,
        callback=lambda output: write_output("output/5_testing/Risk_Management_Register.xlsx", output)
    )

    # Task 2: Issues Management Log
    issues_task = Task(
        description="""
            T·∫°o b·∫£ng log qu·∫£n l√Ω c√°c s·ª± c·ªë (issues) ph√°t sinh trong qu√° tr√¨nh ki·ªÉm th·ª≠.

            ### Output:
            - File: Issues_Management_Log.xlsx

            ### Tr∆∞·ªùng y√™u c·∫ßu:
            - Issue ID, Description, Priority, Status
            - Date Reported, Owner, Root Cause
            - Action Taken, Resolution Date, Comments
        """,
        expected_output="Issues_Management_Log.xlsx ‚Äì B·∫£ng theo d√µi v√† x·ª≠ l√Ω s·ª± c·ªë QA.",
        agent=testing_agent,
        callback=lambda output: write_output("output/5_testing/Issues_Management_Log.xlsx", output)
    )

    # Task 3: Project Status Report
    status_report_task = Task(
        description=f"""
            T·∫°o b√°o c√°o ti·∫øn ƒë·ªô d·ª± √°n ki·ªÉm th·ª≠ ƒë·ªÉ c·∫≠p nh·∫≠t cho PM ho·∫∑c Stakeholder.

            ### Input:
            - Test Summary Report: {test_summary[:300]}...

            ### Output:
            - File: Project_Status_Report.md

            ### N·ªôi dung:
            1. % ho√†n th√†nh ki·ªÉm th·ª≠
            2. T√¨nh tr·∫°ng bug blocker & t·ªïng defect
            3. M·ª©c ƒë·ªô coverage & ch·∫•t l∆∞·ª£ng
            4. UAT readiness & c√°c milestone quan tr·ªçng
            5. Go / No-Go Recommendation
        """,
        expected_output="Project_Status_Report.md ‚Äì B√°o c√°o ti·∫øn ƒë·ªô d·ª± √°n d∆∞·ªõi g√≥c nh√¨n QA.",
        agent=testing_agent,
        callback=lambda output: write_output("output/5_testing/Project_Status_Report.md", output)
    )

    # Task 4: Meeting Summary Template
    meeting_summary_task = Task(
        description="""
            T·∫°o m·∫´u bi√™n b·∫£n h·ªçp cho c√°c phi√™n review QA/UAT/Defect.

            ### Output:
            - File: Meeting_Summary_Template.docx

            ### N·ªôi dung:
            - Meeting Title, Date, Time, Facilitator
            - Participants, Agenda, Discussion Summary
            - Decisions Taken, Action Items, Next Steps
        """,
        expected_output="Meeting_Summary_Template.docx ‚Äì M·∫´u chu·∫©n bi√™n b·∫£n h·ªçp QA.",
        agent=testing_agent,
        callback=lambda output: write_output("output/5_testing/Meeting_Summary_Template.docx", output)
    )

    # Task 5: Project Milestone Status Form Template
    milestone_status_task = Task(
        description="""
            T·∫°o form theo d√µi ti·∫øn ƒë·ªô milestone testing v√† ch·∫•p nh·∫≠n (QA, UAT, Regression...).

            ### Output:
            - File: Project_Milestone_Status_Form_Template.docx

            ### N·ªôi dung:
            - Milestone Name, Description, Due Date
            - Completion %, Status, Risk/Issues
            - Owner, Dependency, Notes
        """,
        expected_output="Project_Milestone_Status_Form_Template.docx ‚Äì Form theo d√µi ti·∫øn ƒë·ªô milestone QA/UAT.",
        agent=testing_agent,
        callback=lambda output: write_output("output/5_testing/Project_Milestone_Status_Form_Template.docx", output)
    )

    print("‚úÖ ƒê√£ ƒë·ªãnh nghƒ©a ƒë·∫ßy ƒë·ªß c√°c nhi·ªám v·ª• qu·∫£n l√Ω ki·ªÉm th·ª≠.")
    return [
        risk_task,
        issues_task,
        status_report_task,
        meeting_summary_task,
        milestone_status_task
    ]