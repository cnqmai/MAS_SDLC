import os
from memory.shared_memory import shared_memory # T·∫°m th·ªùi comment l·∫°i n·∫øu ch∆∞a c√≥ file n√†y

def run_input_collection():
    """
    Ch·∫°y m·ªôt cu·ªôc h·ªôi tho·∫°i ƒë·ªÉ thu th·∫≠p y√™u c·∫ßu cho m·ªôt d·ª± √°n,
    v·ªõi c√°c c√¢u h·ªèi ƒë∆∞·ª£c c·∫•u tr√∫c theo quy tr√¨nh SDLC.
    """

    # --- B·ªò C√ÇU H·ªéI M·ªöI CHO D·ª∞ √ÅN  THEO SDLC ---

    # Giai ƒëo·∫°n 1: L·∫≠p k·∫ø ho·∫°ch & Ph√¢n t√≠ch Y√™u c·∫ßu (Planning & Requirement Analysis)
    planning_questions = {
        "title": "1. L·∫≠p K·∫ø Ho·∫°ch & Y√™u C·∫ßu Chung",
        "questions": [
            "T√™n h·ªá th·ªëng/d·ª± √°n l√† g√¨?",
            "M·ª•c ti√™u ch√≠nh c·ªßa h·ªá th·ªëng l√† g√¨? (V√≠ d·ª•: gi√°m s√°t n√¥ng nghi·ªáp, nh√† th√¥ng minh, theo d√µi t√†i s·∫£n)",
            "H·ªá th·ªëng n√†y gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ c·ª• th·ªÉ n√†o cho ng∆∞·ªùi d√πng ho·∫∑c doanh nghi·ªáp?",
            "Ai l√† ng∆∞·ªùi d√πng cu·ªëi c·ªßa h·ªá th·ªëng? (V√≠ d·ª•: k·ªπ s∆∞ v·∫≠n h√†nh, ng∆∞·ªùi qu·∫£n l√Ω, ng∆∞·ªùi d√¢n)",
            "Ph·∫°m vi c·ªßa d·ª± √°n l√† g√¨? (Ch·ªâ gi√°m s√°t, hay c√≥ c·∫£ ƒëi·ªÅu khi·ªÉn thi·∫øt b·ªã t·ª´ xa?)",
            "D·ª± √°n c√≥ nh·ªØng r√†ng bu·ªôc n√†o v·ªÅ th·ªùi gian ho·∫∑c ng√¢n s√°ch kh√¥ng?"
        ]
    }

    # Giai ƒëo·∫°n 2: Thi·∫øt k·∫ø H·ªá th·ªëng (System Design) - Chia nh·ªè theo c√°c l·ªõp c·ªßa 
    design_hardware_questions = {
        "title": "2.1. Thi·∫øt K·∫ø - Ph·∫ßn C·ª©ng (The 'Things')",
        "questions": [
            "H·ªá th·ªëng s·∫Ω s·ª≠ d·ª•ng nh·ªØng lo·∫°i c·∫£m bi·∫øn (sensor) ho·∫∑c c∆° c·∫•u ch·∫•p h√†nh (actuator) n√†o? (V√≠ d·ª•: nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, GPS, relay...)",
            "Thi·∫øt b·ªã s·∫Ω ho·∫°t ƒë·ªông b·∫±ng ngu·ªìn ƒëi·ªán n√†o? (Pin, ƒëi·ªán l∆∞·ªõi, nƒÉng l∆∞·ª£ng m·∫∑t tr·ªùi?)",
            "M√¥i tr∆∞·ªùng ho·∫°t ƒë·ªông c·ªßa c√°c thi·∫øt b·ªã l√† g√¨? (Trong nh√†, ngo√†i tr·ªùi, nh√† m√°y c√¥ng nghi·ªáp?)",
            "C√≥ y√™u c·∫ßu c·ª• th·ªÉ n√†o v·ªÅ v·ªè h·ªôp hay ƒë·ªô b·ªÅn c·ªßa thi·∫øt b·ªã kh√¥ng (v√≠ d·ª•: ch·ªëng n∆∞·ªõc, ch·ªëng b·ª•i IP67)?"
        ]
    }

    design_connectivity_questions = {
        "title": "2.2. Thi·∫øt K·∫ø - K·∫øt N·ªëi (Connectivity)",
        "questions": [
            "D·ªØ li·ªáu t·ª´ thi·∫øt b·ªã s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒëi b·∫±ng ph∆∞∆°ng th·ª©c k·∫øt n·ªëi n√†o? (WiFi, Bluetooth/BLE, 4G/5G, LoRaWAN?)",
            "T·∫ßn su·∫•t g·ª≠i d·ªØ li·ªáu d·ª± ki·∫øn l√† bao l√¢u m·ªôt l·∫ßn? (M·ªói gi√¢y, m·ªói ph√∫t, m·ªói gi·ªù?)",
            "Giao th·ª©c truy·ªÅn tin d·ª± ki·∫øn l√† g√¨? (MQTT, HTTP, CoAP, hay giao th·ª©c kh√°c?)"
        ]
    }
    
    design_platform_questions = {
        "title": "2.3. Thi·∫øt K·∫ø - N·ªÅn t·∫£ng & D·ªØ li·ªáu (Platform & Data)",
        "questions": [
            "D·ªØ li·ªáu thu th·∫≠p s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω v√† l∆∞u tr·ªØ ·ªü ƒë√¢u? (Tr√™n cloud, t·∫°i m·ªôt server c·ª•c b·ªô, hay x·ª≠ l√Ω t·∫°i bi√™n - edge computing?)",
            "C√≥ y√™u c·∫ßu t√≠ch h·ª£p v·ªõi n·ªÅn t·∫£ng cloud c·ª• th·ªÉ n√†o kh√¥ng? (AWS, Azure Hub, Google Cloud?)",
            "H·ªá th·ªëng c·∫ßn l∆∞u tr·ªØ d·ªØ li·ªáu trong bao l√¢u? C√≥ y√™u c·∫ßu g√¨ v·ªÅ truy xu·∫•t d·ªØ li·ªáu l·ªãch s·ª≠ kh√¥ng?"
        ]
    }

    design_application_questions = {
        "title": "2.4. Thi·∫øt K·∫ø - ·ª®ng d·ª•ng & Giao di·ªán (Application & UI/UX)",
        "questions": [
            "Ng∆∞·ªùi d√πng s·∫Ω t∆∞∆°ng t√°c v·ªõi h·ªá th·ªëng qua ƒë√¢u? (Web dashboard, ·ª©ng d·ª•ng di ƒë·ªông, email/SMS c·∫£nh b√°o?)",
            "H·ªá th·ªëng c·∫ßn cung c·∫•p nh·ªØng lo·∫°i b√°o c√°o, th·ªëng k√™ hay bi·ªÉu ƒë·ªì tr·ª±c quan h√≥a d·ªØ li·ªáu n√†o?",
            "Giao di·ªán ng∆∞·ªùi d√πng c·∫ßn c√≥ nh·ªØng ƒë·∫∑c ƒëi·ªÉm g√¨? (ƒê∆°n gi·∫£n, hi·ªán ƒë·∫°i, hi·ªÉn th·ªã real-time?)"
        ]
    }

    # Giai ƒëo·∫°n 3: V·∫≠n h√†nh & B·∫£o tr√¨ (Operation & Maintenance)
    operation_questions = {
        "title": "3. V·∫≠n H√†nh & B·∫£o M·∫≠t",
        "questions": [
            "H·ªá th·ªëng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát n√†o v·ªÅ b·∫£o m·∫≠t kh√¥ng? (M√£ h√≥a d·ªØ li·ªáu, x√°c th·ª±c thi·∫øt b·ªã an to√†n?)",
            "C√≥ c·∫ßn h·ªó tr·ª£ c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm cho thi·∫øt b·ªã t·ª´ xa (OTA - Over-the-Air) kh√¥ng?",
            "L√†m th·∫ø n√†o ƒë·ªÉ qu·∫£n l√Ω v√† gi√°m s√°t tr·∫°ng th√°i c·ªßa h√†ng lo·∫°t thi·∫øt b·ªã? (V√≠ d·ª•: tr·∫°ng th√°i pin, k·∫øt n·ªëi)"
        ]
    }
    
    # T·∫≠p h·ª£p t·∫•t c·∫£ c√°c nh√≥m c√¢u h·ªèi
    all_question_groups = [
        planning_questions,
        design_hardware_questions,
        design_connectivity_questions,
        design_platform_questions,
        design_application_questions,
        operation_questions
    ]
    
    system_info = {}
    system_request = ""

    # V√≤ng l·∫∑p thu th·∫≠p th√¥ng tin theo t·ª´ng nh√≥m
    for group in all_question_groups:
        title = group["title"]
        questions = group["questions"]
        
        print(f"\n--- B·∫Øt ƒë·∫ßu nh√≥m c√¢u h·ªèi: {title} ---")
        system_request += f"## {title}\n"
        
        for question in questions:
            print(f"\nü§ñ Agent: {question}")
            answer = input("üë§ B·∫°n: ")
            system_info[question] = answer # L∆∞u tr·ªØ Q&A
            system_request += f"**C√¢u h·ªèi:** {question}\n**Tr·∫£ l·ªùi:** {answer}\n\n"

    # L∆∞u v√†o shared_memory (n·∫øu b·∫°n c√≥ module n√†y)
    shared_memory.set("phase_0", "system_request", system_request)

    # Ghi v√†o file output/system_request.txt
    os.makedirs("output", exist_ok=True)
    with open("output/system_request.txt", "w", encoding="utf-8") as f:
        f.write(system_request)

    print("\n‚úÖ ƒê√£ t·∫°o file system_request.txt v·ªõi th√¥ng tin y√™u c·∫ßu h·ªá th·ªëng.\n")

# Ch·∫°y h√†m ch√≠nh
if __name__ == "__main__":
    run_input_collection()